#!/usr/bin/env bpftrace

/* ntrace.bt
 * About: Traces all file access events of a process and its subprocs and
 * outputs the total bytes read/write and access times.
 *
 * Usage:
 *   sudo bpftrace -o tracing.out ntrace.bt <NAME>
 */

/* when we see a fork, if parent is tracked then also track child */
tracepoint:sched:sched_process_fork
/ @tracked[args->parent_pid] /
{
  printf("[%s] %d %s FORK -> %d %s\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         args->parent_pid, args->parent_comm, args->child_pid, args->child_comm);

  @fname[pid, 0] = "STDIN";
  @fname[pid, 1] = "STDOUT";
  @fname[pid, 2] = "STDERR";
  @tracked[args->child_pid] = 1;

  printf("[%s] Tracking PID %d...\n", strftime("%Y-%m-%d %H:%M:%S", nsecs), args->child_pid);
}

/* when exec happens, if old_pid tracked ensure that the new pid is also tracked */
tracepoint:sched:sched_process_exec
/ comm == str($1) || @tracked[args->old_pid] /
{
  printf("[%s] %d %s EXEC %d %s\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         args->old_pid, comm, args->pid, str(args->filename));

  @fname[pid, 0] = "STDIN";
  @fname[pid, 1] = "STDOUT";
  @fname[pid, 2] = "STDERR";
  @tracked[args->pid] = 1;

  printf("[%s] Tracking PID %d...\n", strftime("%Y-%m-%d %H:%M:%S", nsecs), args->pid);
}

/* openat enter + exit, map (pid, fd) pairs to filenames */
tracepoint:syscalls:sys_enter_openat
/ @tracked[pid] /
{
  printf("[%s] %d %s ENTER openat dfd=%d fname=%s flags=0x%x mode=0%o\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, args->dfd, str(args->filename), args->flags, args->mode);
  @open_fname[tid] = args->filename;
}

tracepoint:syscalls:sys_exit_openat
/ @tracked[pid] /
{
  $fname = str(@open_fname[tid]);
  printf("[%s] %d %s EXIT openat fname=%s ret=%d\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, $fname, args->ret);
  if(args->ret >= 0){
    @fname[pid, args->ret] = $fname;
    @read_bytes[$fname] = sum(0);
    @write_bytes[$fname] = sum(0);
    @read_time[$fname] = sum(0);
    @write_time[$fname] = sum(0);
  }
  delete(@open_fname[tid]);
}

/* dup enter + exit, update fname map in case of dup */
tracepoint:syscalls:sys_enter_dup
/ @tracked[pid] /
{
  $fname = @fname[pid, args->fildes];
  printf("[%s] %d %s ENTER dup fildes=%d fname=%s\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, args->fildes, $fname);
  @dup_fd[tid] = args->fildes;
}

tracepoint:syscalls:sys_exit_dup
/ @tracked[pid] /
{
  $fd = @dup_fd[tid];
  $fname = @fname[pid, $fd];
  printf("[%s] %d %s EXIT dup fd=%d fname=%s ret=%d\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, $fd, $fname, args->ret);
  if(args->ret != -1){
    @fname[pid, args->ret] = $fname;
  }
  delete(@fname[pid, $fd]);
  delete(@dup_fd[tid]);
}

/* dup2 enter + exit, update fname map in case of dup2 */
tracepoint:syscalls:sys_enter_dup2
/ @tracked[pid] /
{
  $fname = @fname[pid, args->oldfd];
  printf("[%s] %d %s ENTER dup2 oldfd=%d newfd=%d fname=%s\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, args->oldfd, args->newfd, $fname);
  @dup_fd[tid] = args->oldfd;
}

tracepoint:syscalls:sys_exit_dup2
/ @tracked[pid] /
{
  $fd = @dup_fd[tid];
  $fname = @fname[pid, $fd];
  printf("[%s] %d %s EXIT dup2 fd=%d fname=%s ret=%d\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, $fd, $fname, args->ret);
  if(args->ret != -1){
    @fname[pid, args->ret] = $fname;
  }
  delete(@fname[pid, $fd]);
  delete(@dup_fd[tid]);
}

/* newfstat enter + exit, count total number of fstats */
tracepoint:syscalls:sys_enter_newfstat
/ @tracked[pid] /
{
  $fname = @fname[pid, args->fd];
  printf("[%s] %d %s ENTER newfstat fd=%d fname=%s\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, args->fd, $fname);
  @fstat_fd[tid] = args->fd;
}

tracepoint:syscalls:sys_exit_newfstat
/ @tracked[pid] /
{
  $fd = @fstat_fd[tid];
  $fname = @fname[pid, $fd];
  printf("[%s] %d %s EXIT newfstat fd=%d fname=%s ret=%d\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, $fd, $fname, args->ret);
  if(args->ret != -1){
    @num_fstat[$fname] = count();
  }
  delete(@fstat_fd[tid]);
}

/* read enter + exit, sum bytes read and total time */
tracepoint:syscalls:sys_enter_read
/ @tracked[pid] /
{
  $fname = @fname[pid, args->fd];
  printf("[%s] %d %s ENTER read fd=%d fname=%s count=%d\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, args->fd, $fname, args->count);
  @read_fd[tid] = args->fd;
  @read_count[tid] = args->count;
  @read_start_time[tid] = elapsed;
}

tracepoint:syscalls:sys_exit_read
/ @tracked[pid] /
{
  $fd = @read_fd[tid];
  $fname = @fname[pid, $fd];
  printf("[%s] %d %s EXIT read fd=%d fname=%s ret=%d req=%d\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, $fd, $fname, args->ret, @read_count[tid]);
  if(args->ret != -1){
    @read_bytes[$fname] = sum(args->ret);
    @read_time[$fname] = sum(elapsed - @read_start_time[tid]);
  }
  delete(@read_fd[tid]);
  delete(@read_count[tid]);
  delete(@read_start_time[tid]);
}

/* write enter + exist, sum bytes wrote and total time */
tracepoint:syscalls:sys_enter_write
/ @tracked[pid] /
{
  $fname = @fname[pid, args->fd];
  printf("[%s] %d %s ENTER write fd=%d fname=%s count=%d\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, args->fd, $fname, args->count);
  @write_fd[tid] = args->fd;
  @write_count[tid] = args->count;
  @write_start_time[tid] = elapsed;
}

tracepoint:syscalls:sys_exit_write
/ @tracked[pid] /
{
  $fd = @write_fd[tid];
  $fname = @fname[pid, $fd];
  printf("[%s] %d %s EXIT write fd=%d fname=%s ret=%d req=%d\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, $fd, $fname, args->ret, @write_count[tid]);
  if(args->ret != -1){
    @write_bytes[$fname] = sum(args->ret);
    @write_time[$fname] = sum(elapsed - @write_start_time[tid]);
    delete(@write_start_time[tid]);
  }
  delete(@write_fd[tid]);
  delete(@write_count[tid]);
}

/* close enter + exit, cleanup helper map entries */
tracepoint:syscalls:sys_enter_close
/ @tracked[pid] /
{
  $fname = @fname[pid, args->fd];
  printf("[%s] %d %s ENTER close fd=%d fname=%s\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, args->fd, $fname);
  @close_fd[tid] = args->fd;
}

tracepoint:syscalls:sys_exit_close
/ @tracked[pid] /
{
  $fd = @close_fd[tid];
  $fname = @fname[pid, $fd];
  printf("[%s] %d %s EXIT close fd=%d fname=%s ret=%d\n", strftime("%Y-%m-%d %H:%M:%S", nsecs),
         pid, comm, $fd, $fname, args->ret);
  delete(@close_fd[tid]);
  delete(@fname[pid, $fd]);
}

/* cleanup process fname table and untrack process */
tracepoint:sched:sched_process_exit
/ @tracked[pid] /
{
  printf("[%s] %d %s EXIT_PROCESS\n", strftime("%Y-%m-%d %H:%M:%S", nsecs), pid, comm);

  delete(@fname[pid, 0]);
  delete(@fname[pid, 1]);
  delete(@fname[pid, 2]);
  delete(@tracked[pid]);
}

